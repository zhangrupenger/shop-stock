<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hamster.dao.mapper.EmpMapper">
  <resultMap id="BaseResultMap" type="com.hamster.dao.domain.Emp">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="poi_id" jdbcType="BIGINT" property="poiId" />
    <result column="entry_time" jdbcType="BIGINT" property="entryTime" />
    <result column="quit_time" jdbcType="VARCHAR" property="quitTime" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="base_salary" jdbcType="BIGINT" property="baseSalary" />
    <result column="performance_scale" jdbcType="BIGINT" property="performanceScale" />
    <result column="ctime" jdbcType="BIGINT" property="ctime" />
    <result column="valid" jdbcType="SMALLINT" property="valid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, poi_id, entry_time, quit_time, role, base_salary, performance_scale, 
    ctime, valid
  </sql>
  <select id="selectByExample" parameterType="com.hamster.dao.domain.EmpExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from emp
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from emp
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hamster.dao.domain.EmpExample">
    delete from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hamster.dao.domain.Emp">
    insert into emp (id, user_id, poi_id, 
      entry_time, quit_time, role, 
      base_salary, performance_scale, ctime, 
      valid)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{poiId,jdbcType=BIGINT}, 
      #{entryTime,jdbcType=BIGINT}, #{quitTime,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, 
      #{baseSalary,jdbcType=BIGINT}, #{performanceScale,jdbcType=BIGINT}, #{ctime,jdbcType=BIGINT}, 
      #{valid,jdbcType=SMALLINT})
  </insert>
  <insert id="insertSelective" parameterType="com.hamster.dao.domain.Emp">
    insert into emp
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="poiId != null">
        poi_id,
      </if>
      <if test="entryTime != null">
        entry_time,
      </if>
      <if test="quitTime != null">
        quit_time,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="baseSalary != null">
        base_salary,
      </if>
      <if test="performanceScale != null">
        performance_scale,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="valid != null">
        valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="poiId != null">
        #{poiId,jdbcType=BIGINT},
      </if>
      <if test="entryTime != null">
        #{entryTime,jdbcType=BIGINT},
      </if>
      <if test="quitTime != null">
        #{quitTime,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null">
        #{baseSalary,jdbcType=BIGINT},
      </if>
      <if test="performanceScale != null">
        #{performanceScale,jdbcType=BIGINT},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=BIGINT},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hamster.dao.domain.EmpExample" resultType="java.lang.Long">
    select count(*) from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update emp
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.poiId != null">
        poi_id = #{record.poiId,jdbcType=BIGINT},
      </if>
      <if test="record.entryTime != null">
        entry_time = #{record.entryTime,jdbcType=BIGINT},
      </if>
      <if test="record.quitTime != null">
        quit_time = #{record.quitTime,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        role = #{record.role,jdbcType=INTEGER},
      </if>
      <if test="record.baseSalary != null">
        base_salary = #{record.baseSalary,jdbcType=BIGINT},
      </if>
      <if test="record.performanceScale != null">
        performance_scale = #{record.performanceScale,jdbcType=BIGINT},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=BIGINT},
      </if>
      <if test="record.valid != null">
        valid = #{record.valid,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update emp
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      poi_id = #{record.poiId,jdbcType=BIGINT},
      entry_time = #{record.entryTime,jdbcType=BIGINT},
      quit_time = #{record.quitTime,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=INTEGER},
      base_salary = #{record.baseSalary,jdbcType=BIGINT},
      performance_scale = #{record.performanceScale,jdbcType=BIGINT},
      ctime = #{record.ctime,jdbcType=BIGINT},
      valid = #{record.valid,jdbcType=SMALLINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hamster.dao.domain.Emp">
    update emp
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="poiId != null">
        poi_id = #{poiId,jdbcType=BIGINT},
      </if>
      <if test="entryTime != null">
        entry_time = #{entryTime,jdbcType=BIGINT},
      </if>
      <if test="quitTime != null">
        quit_time = #{quitTime,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null">
        base_salary = #{baseSalary,jdbcType=BIGINT},
      </if>
      <if test="performanceScale != null">
        performance_scale = #{performanceScale,jdbcType=BIGINT},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=BIGINT},
      </if>
      <if test="valid != null">
        valid = #{valid,jdbcType=SMALLINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hamster.dao.domain.Emp">
    update emp
    set user_id = #{userId,jdbcType=BIGINT},
      poi_id = #{poiId,jdbcType=BIGINT},
      entry_time = #{entryTime,jdbcType=BIGINT},
      quit_time = #{quitTime,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      base_salary = #{baseSalary,jdbcType=BIGINT},
      performance_scale = #{performanceScale,jdbcType=BIGINT},
      ctime = #{ctime,jdbcType=BIGINT},
      valid = #{valid,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>